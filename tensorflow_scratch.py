# -*- coding: utf-8 -*-
"""Tensorflow Scratch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fseaHZUJ97BOnYNdf_7aR0Je56oB3gEu

<h1>Fashion MNIST Dataset Classification using Tensorflow</h1>
<p>In this tutorial you will see i will build a power full fashion classification model on Fashion mnist dataset using Tensorflow from scratch</p>
"""

#importing the library
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.optimizers import RMSprop

"""<h1>Defining Classback function"""

#defining the class using tensorflow callback with epochs
class myCallback(tf.keras.callbacks.Callback):
  def one_epoch_end(self,epoch, logs={}):
    #defining the loss
    if (logs.get('loss')<4.0):
      print("Reach 60% accuracy so cancelling the training")
      self.model.stop_training=True

#calling the deifnining class
callback=myCallback()

import numpy as np
import pandas as pd
#getting the datasset
mnist = tf.keras.datasets.fashion_mnist
(training_data,training_label),(test_data,test_label)= mnist.load_data()
training_data=training_data/255.0
test_data=test_data/255.0

print("Training shape is :",training_data.shape)
print('Test shape is :',test_data.shape)

"""<h1>Plotting Fashion MNIST Images</h1>"""

plt.figure(figsize=(15,15))
for i in range(1,21):
    row = i
    grid_data =training_data[row]
    plt.subplot(5,10,row)
    plt.imshow(grid_data, interpolation = "none", cmap = "gray")
    plt.xlabel(training_label[row],labelpad=5)
plt.show()

print(training_data[0])

#defining the neural network
model = tf.keras.models.Sequential()

#defining the layer
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(512, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

#compiling the my model
model.compile( optimizer='adam', loss='sparse_categorical_crossentropy',metrics=['accuracy'])

#fitting my model into the dataset
history=model.fit(training_data,training_label, epochs=50, validation_data=(test_data, test_label),callbacks=[callback],verbose=1)

score = model.evaluate(test_data, test_label, verbose=0) 
print('Test score (Validation Loss):', score[0]) 
print('Test accuracy (Accuracy on Unseen Data):', score[1])

